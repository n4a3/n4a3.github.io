{"version":3,"sources":["entry/App/PrivateRoute/PrivateRoute.tsx","entry/App/ErrorBoundary/index.ts","entry/App/ErrorBoundary/ErrorBoundary.tsx","entry/App/App.tsx","serviceWorker.ts","index.tsx","stores/AuthStore.ts","stores/BalanceStore.ts","stores/RootStore.ts","stores/index.ts"],"names":["PrivateRoute","Component","component","rest","render","props","rootStore","authStore","isLoggedIn","to","ErrorBoundary","observer","this","hasError","children","observable","Login","lazy","Balance","App","fallback","path","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","AuthStore","setKey","key","res","web3","eth","accounts","privateKeyToAccount","account","error","signOut","balanceStore","balance","address","computed","BalanceStore","refreshBalance","isLoading","getBalance","isAddress","catch","message","finally","onChange","event","value","currentTarget","unit","Web3"],"mappings":"yWA0BeA,EAhBoC,SAAC,GAAD,IACtCC,EADsC,EACjDC,UACGC,EAF8C,oCAIjD,kBAAC,IAAD,iBACMA,EADN,CAEEC,OAAQ,SAAAC,GAAK,OACXC,IAAUC,UAAUC,WAClB,kBAACP,EAAcI,GAEf,kBAAC,IAAD,CAAUI,GAAG,oB,2FClBNC,ECEdC,a,0UAMGC,KAAKC,UAAW,I,+BAIhB,OAAOD,KAAKC,SACV,gEAEAD,KAAKP,MAAMS,a,GAZWb,a,sCACzBc,K,yEACkB,K,SCAfC,EAAQC,gBAAK,kBAAM,uDACnBC,EAAUD,gBAAK,kBAAM,8DAcZE,EAZOR,aAAS,kBAC7B,kBAAC,EAAD,KACE,kBAAC,WAAD,CAAUS,SAAU,kDAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,SAASnB,UAAWc,IAChC,kBAAC,EAAD,CAAcK,KAAK,WAAWnB,UAAWgB,IACzC,kBAAC,IAAD,CAAUT,GAAIH,IAAUC,UAAUC,WAAa,WAAa,iB,OCJhDc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASvB,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFwB,SAASC,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,yHE5FJC,G,aAxBb,WAAqB9B,GAAuB,IAAD,gCAAtBA,YAAsB,uJAQ3C+B,OAAS,SAACC,GACR,IACE,IAAMC,EAAM,EAAKjC,UAAUkC,KAAKC,IAAIC,SAASC,oBAAoBL,GAEjE,OADA,EAAKM,QAAUL,GACR,EACP,MAAOM,GACP,OAAO,IAdgC,KAkB3CC,QAAU,WACR,EAAKF,QAAU,KACf,EAAKtC,UAAUyC,aAAaC,QAAU,IAnBtCpC,KAAKN,UAAYA,E,uDATjB,QAASM,KAAKgC,U,8BAID,IAAD,EACZ,iBAAOhC,KAAKgC,eAAZ,aAAO,EAAcK,Y,4CAjBtBlC,K,yEACW,K,sCACXA,K,yEACU,K,wCACVA,K,yEAC4B,Q,qCAE5BA,K,yEACiC,Q,sCAEjCmC,K,0GAKAA,K,+EC4BYC,G,EAlCb,WAAqB7C,GAAuB,IAAD,gCAAtBA,YAAsB,8IAIpC8C,eAAiB,WACtB,EAAKC,WAAY,EADW,MAOxB,EAAK/C,UAHEgD,EAJiB,EAG1Bd,KACEC,IAAOa,WAJiB,IAM1B/C,UAAa0C,eANa,MAMH,GANG,EAS5BM,oBAAUN,IACRK,EAAWL,GACRhB,MAAK,SAAAe,GACJ,EAAKA,QAAUA,EACf,EAAKH,MAAQ,QAEdW,OAAM,SAAAX,GACL,EAAKG,QAAU,GACf,EAAKH,MAAQA,EAAMY,WAEpBC,SAAQ,WACP,EAAKL,WAAY,MAxBkB,KA4BpCM,SAAW,SAACC,GAAiD,IAC1DC,EAAUD,EAAME,cAAhBD,MACR,EAAKE,KAAOF,GA7BZjD,KAAKN,UAAYA,G,qCAVlBS,K,wEACS,M,uCACTA,K,yEACW,K,mCACXA,K,yEACsB,Q,kCACtBA,K,wEACY,W,GCCFT,EAAY,IANzB,sCACWkC,KAAa,IAAIwB,IAH1B,iEAEF,KAEWzD,UAAuB,IAAI6B,EAAUxB,MAFhD,KAGWmC,aAA6B,IAAII,EAAavC,OCVzD,oC","file":"static/js/main.f8cf2f23.chunk.js","sourcesContent":["import React from 'react';\nimport { Redirect, Route, RouteProps } from 'react-router-dom';\nimport { rootStore } from '../../../stores';\n\ninterface IProps {\n  component: any;\n}\n\ntype IPrivateRouteProps = RouteProps & IProps;\n\nconst PrivateRoute: React.FC<IPrivateRouteProps> = ({\n  component: Component,\n  ...rest\n}) => (\n  <Route\n    {...rest}\n    render={props =>\n      rootStore.authStore.isLoggedIn ? (\n        <Component {...props} />\n      ) : (\n        <Redirect to=\"/login?403\" />\n      )\n    }\n  />\n);\n\nexport default PrivateRoute;\n","import ErrorBoundary from './ErrorBoundary';\n\nexport default ErrorBoundary;\n","import { observable } from 'mobx';\nimport { observer } from 'mobx-react';\nimport React, { Component } from 'react';\n\n@observer\nclass ErrorBoundary extends Component {\n  @observable\n  private hasError = false;\n\n  public componentDidCatch() {\n    this.hasError = true;\n  }\n\n  public render() {\n    return this.hasError ? (\n      <div>Error. Please refresh the page.</div>\n    ) : (\n      this.props.children\n    );\n  }\n}\n\nexport default ErrorBoundary;\n","import { observer } from 'mobx-react-lite';\nimport React, { lazy, Suspense } from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport { rootStore } from '../../stores';\nimport PrivateRoute from './PrivateRoute/PrivateRoute';\nimport ErrorBoundary from './ErrorBoundary';\n\nconst Login = lazy(() => import('../../views/Login'));\nconst Balance = lazy(() => import('../../views/Balance'));\n\nconst App: React.FC = observer(() => (\n  <ErrorBoundary>\n    <Suspense fallback={<div>loading chunk...</div>}>\n      <Switch>\n        <Route path=\"/login\" component={Login} />\n        <PrivateRoute path=\"/balance\" component={Balance} />\n        <Redirect to={rootStore.authStore.isLoggedIn ? '/balance' : '/login'} />\n      </Switch>\n    </Suspense>\n  </ErrorBoundary>\n));\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom';\nimport App from './entry/App/App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { computed, observable } from 'mobx';\nimport { Account } from 'web3-core';\nimport { RootStore } from './RootStore';\n\nclass AuthStore {\n  @observable\n  isLoading = false;\n  @observable\n  hasError = false;\n  @observable\n  isKeyValid: boolean | null = null;\n\n  @observable\n  private account: Account | null = null;\n\n  @computed\n  get isLoggedIn(): boolean {\n    return !!this.account;\n  }\n\n  @computed\n  get address() {\n    return this.account?.address;\n  }\n\n  constructor(readonly rootStore: RootStore) {\n    this.rootStore = rootStore;\n  }\n\n  /**\n   * @returns true when key is valid\n   * @returns false when key is not valid\n   */\n  setKey = (key: string) => {\n    try {\n      const res = this.rootStore.web3.eth.accounts.privateKeyToAccount(key);\n      this.account = res;\n      return true;\n    } catch (error) {\n      return false;\n    }\n  };\n\n  signOut = () => {\n    this.account = null;\n    this.rootStore.balanceStore.balance = '';\n  };\n}\n\nexport default AuthStore;\n","import { observable } from 'mobx';\nimport { RootStore } from './RootStore';\nimport { isAddress, Unit } from 'web3-utils';\n\nclass BalanceStore {\n  @observable\n  balance = '';\n  @observable\n  isLoading = false;\n  @observable\n  error: string | null = null;\n  @observable\n  unit: Unit = 'ether';\n\n  constructor(readonly rootStore: RootStore) {\n    this.rootStore = rootStore;\n  }\n\n  public refreshBalance = () => {\n    this.isLoading = true;\n    const {\n      web3: {\n        eth: { getBalance }\n      },\n      authStore: { address = '' }\n    } = this.rootStore;\n\n    isAddress(address) &&\n      getBalance(address)\n        .then(balance => {\n          this.balance = balance;\n          this.error = null;\n        })\n        .catch(error => {\n          this.balance = '';\n          this.error = error.message;\n        })\n        .finally(() => {\n          this.isLoading = false;\n        });\n  };\n\n  public onChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.currentTarget;\n    this.unit = value as Unit;\n  };\n}\n\nexport default BalanceStore;\n","import Web3 from 'web3';\nimport AuthStore from './AuthStore';\nimport BalanceStore from './BalanceStore';\n\nconst ETH_NODE =\n  'https://ropsten.infura.io/v3/8402868d85324f07af058e134cbd1c84';\n\nexport class RootStore {\n  readonly web3: Web3 = new Web3(ETH_NODE);\n  readonly authStore: AuthStore = new AuthStore(this);\n  readonly balanceStore: BalanceStore = new BalanceStore(this);\n}\n\nexport const rootStore = new RootStore();\n","export { rootStore } from './RootStore';\n"],"sourceRoot":""}