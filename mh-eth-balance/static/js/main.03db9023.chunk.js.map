{"version":3,"sources":["entry/App/PrivateRoute/PrivateRoute.tsx","entry/App/App.tsx","serviceWorker.ts","index.tsx","stores/AuthStore.ts","stores/RootStore.ts","stores/index.ts"],"names":["PrivateRoute","Component","component","rest","render","props","rootStore","authStore","isLoggedIn","to","Login","lazy","Balance","App","observer","fallback","path","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","AuthStore","setKey","key","res","web3","eth","accounts","privateKeyToAccount","account","error","signOut","this","address","observable","computed","Web3"],"mappings":"oWA0BeA,EAhBoC,SAAC,GAAD,IACtCC,EADsC,EACjDC,UACGC,EAF8C,oCAIjD,kBAAC,IAAD,iBACMA,EADN,CAEEC,OAAQ,SAAAC,GAAK,OACXC,IAAUC,UAAUC,WAClB,kBAACP,EAAcI,GAEf,kBAAC,IAAD,CAAUI,GAAG,oBCdfC,EAAQC,gBAAK,kBAAM,uDACnBC,EAAUD,gBAAK,kBAAM,8DAYZE,EAVOC,aAAS,kBAC7B,kBAAC,WAAD,CAAUC,SAAU,kDAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,SAASd,UAAWQ,IAChC,kBAAC,EAAD,CAAcM,KAAK,WAAWd,UAAWU,IACzC,kBAAC,IAAD,CAAUH,GAAIH,IAAUC,UAAUC,WAAa,WAAa,gB,OCF9CS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASlB,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFmB,SAASC,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,iHE7FJC,G,aAvBb,WAAqBzB,GAAuB,IAAD,gCAAtBA,YAAsB,uJAQ3C0B,OAAS,SAACC,GACR,IACE,IAAMC,EAAM,EAAK5B,UAAU6B,KAAKC,IAAIC,SAASC,oBAAoBL,GAEjE,OADA,EAAKM,QAAUL,GACR,EACP,MAAOM,GACP,OAAO,IAdgC,KAkB3CC,QAAU,WACR,EAAKF,QAAU,MAlBfG,KAAKpC,UAAYA,E,uDATjB,QAASoC,KAAKH,U,6BAIF,IAAD,EACX,iBAAOG,KAAKH,eAAZ,aAAO,EAAcI,Y,4CAjBtBC,K,yEACW,K,sCACXA,K,yEACU,K,wCACVA,K,yEAC4B,Q,qCAE5BA,K,yEACiC,Q,sCAEjCC,K,yGAKAA,K,sECTUvC,EAAY,IALzB,sCACW6B,KAAa,IAAIW,IAH1B,iEAEF,KAEWvC,UAAuB,IAAIwB,EAAUW,OCRhD,oC","file":"static/js/main.03db9023.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Redirect, Route, RouteProps } from 'react-router-dom';\r\nimport { rootStore } from '../../../stores';\r\n\r\ninterface IProps {\r\n  component: any;\r\n}\r\n\r\ntype IPrivateRouteProps = RouteProps & IProps;\r\n\r\nconst PrivateRoute: React.FC<IPrivateRouteProps> = ({\r\n  component: Component,\r\n  ...rest\r\n}) => (\r\n  <Route\r\n    {...rest}\r\n    render={props =>\r\n      rootStore.authStore.isLoggedIn ? (\r\n        <Component {...props} />\r\n      ) : (\r\n        <Redirect to=\"/login?403\" />\r\n      )\r\n    }\r\n  />\r\n);\r\n\r\nexport default PrivateRoute;\r\n","import { observer } from 'mobx-react-lite';\nimport React, { lazy, Suspense } from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport { rootStore } from '../../stores';\nimport PrivateRoute from './PrivateRoute/PrivateRoute';\n\nconst Login = lazy(() => import('../../views/Login'));\nconst Balance = lazy(() => import('../../views/Balance'));\n\nconst App: React.FC = observer(() => (\n  <Suspense fallback={<div>loading chunk...</div>}>\n    <Switch>\n      <Route path=\"/login\" component={Login} />\n      <PrivateRoute path=\"/balance\" component={Balance} />\n      <Redirect to={rootStore.authStore.isLoggedIn ? '/balance' : '/login'} />\n    </Switch>\n  </Suspense>\n));\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom';\nimport App from './entry/App/App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { computed, observable } from 'mobx';\r\nimport { Account } from 'web3-core';\r\nimport { RootStore } from './RootStore';\r\n\r\nclass AuthStore {\r\n  @observable\r\n  isLoading = false;\r\n  @observable\r\n  hasError = false;\r\n  @observable\r\n  isKeyValid: boolean | null = null;\r\n\r\n  @observable\r\n  private account: Account | null = null;\r\n\r\n  @computed\r\n  get isLoggedIn(): boolean {\r\n    return !!this.account;\r\n  }\r\n\r\n  @computed\r\n  get adress() {\r\n    return this.account?.address;\r\n  }\r\n\r\n  constructor(readonly rootStore: RootStore) {\r\n    this.rootStore = rootStore;\r\n  }\r\n\r\n  /**\r\n   * @returns true when key is valid\r\n   * @returns false when key is not valid\r\n   */\r\n  setKey = (key: string) => {\r\n    try {\r\n      const res = this.rootStore.web3.eth.accounts.privateKeyToAccount(key);\r\n      this.account = res;\r\n      return true;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  signOut = () => {\r\n    this.account = null;\r\n  };\r\n}\r\n\r\nexport default AuthStore;\r\n","import Web3 from 'web3';\r\nimport AuthStore from './AuthStore';\r\n\r\nconst ETH_NODE =\r\n  'https://ropsten.infura.io/v3/8402868d85324f07af058e134cbd1c84';\r\n\r\nexport class RootStore {\r\n  readonly web3: Web3 = new Web3(ETH_NODE);\r\n  readonly authStore: AuthStore = new AuthStore(this);\r\n}\r\n\r\nexport const rootStore = new RootStore();\r\n","export { rootStore } from './RootStore';\r\n"],"sourceRoot":""}