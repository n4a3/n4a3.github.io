{"version":3,"sources":["types/InputTypes.ts","types/ButtonSkins.ts","types/DropdownSkins.ts","types/LinkSkins.ts","types/index.ts","utils/getProp.ts","stores/SettingsStore.ts","stores/DashboardStore.ts","api/ls-api.ts","stores/AuthStore.ts","stores/RootStore.ts","components/Button/Button.styles.ts","components/Button/Button.tsx","components/Button/index.ts","constants/girdLayouts.ts","components/Loader/Loader.styles.ts","components/Loader/Loader.tsx","components/Loader/index.ts","entry/App/App.styles.ts","entry/App/PrivateRoute/PrivateRoute.tsx","entry/App/App.tsx","entry/App/index.ts","serviceWorker.ts","index.tsx"],"names":["InputTypes","ButtonSkins","DropdownSkins","LinkSkins","getProp","prop","undefined","isNaN","defSectionsSettings","title","checked","SettingsStore","dashboardStore","setOverviewSettings","newSectionSettings","newLayout","sectionSettings","map","setting","index","layout","localStorage","setItem","JSON","stringify","overviewSettings","this","getItem","data","parse","sections","observable","computed","DashboardStore","rootStore","settingsStore","toggleNav","isNavVisible","isModalOpened","key","openedModals","indexOf","openModal","push","closeModal","idx","splice","closeAllModals","current","css","gridLayouts","setAuthorizedToLS","name","delayedAction","errorValue","a","Promise","resolve","reject","Math","random","setTimeout","register","email","password","then","login","parsed","logout","AuthStore","console","log","isLoading","res","window","location","replace","errorType","authorizedUser","authStore","ButtonStyled","styled","button","width","skin","BADGE","CIRCLE","ICON","TRANSPARENT","Button","children","DEFAULT","rest","disabled","dotAnimations","keyframes","Wrapper","div","Dot","Loader","GlobalStyle","createGlobalStyle","LoaderWraper","PrivateRoute","Component","component","render","props","to","pathname","state","from","Auth","lazy","Dashboard","App","observer","setMouseInput","document","body","classList","remove","removeEventListener","addEventListener","keyboardHandler","event","includes","setKeyboardInput","add","hasError","onClick","reload","fallback","path","Boolean","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.518192ea.chunk.js","sourcesContent":["export enum InputTypes {\r\n  TEXT = 'text',\r\n  PASSWORD = 'password',\r\n  EMAIL = 'email'\r\n}\r\n","export enum ButtonSkins {\r\n  DEFAULT,\r\n  BADGE,\r\n  CIRCLE,\r\n  TRANSPARENT,\r\n  ICON\r\n}\r\n","export enum DropdownSkins {\r\n  DEFAULT,\r\n  FLAT\r\n}\r\n","export enum LinkSkins {\r\n  PRIMARY,\r\n  SECONDARY\r\n}\r\n","import { InputTypes } from './InputTypes';\r\nimport { ButtonSkins } from './ButtonSkins';\r\nimport { DropdownSkins } from './DropdownSkins';\r\nimport { LinkSkins } from './LinkSkins';\r\n\r\nexport { InputTypes };\r\nexport { ButtonSkins, DropdownSkins, LinkSkins };\r\n","export const getProp = (prop?: string | number) => {\r\n  return prop !== undefined ? (isNaN(+prop) ? prop : `${prop}px`) : prop;\r\n};\r\n","import { computed, observable } from 'mobx';\r\nimport DashboardStore from './DashboardStore';\r\n\r\nexport type TSectionsSettings = Array<{ title: string; checked: boolean }>;\r\n\r\ninterface IOverviewSettings {\r\n  sections: TSectionsSettings;\r\n  layout: number;\r\n}\r\n\r\nconst defSectionsSettings: TSectionsSettings = [\r\n  { title: 'Camera', checked: true },\r\n  { title: 'Consumption by room', checked: true },\r\n  { title: 'Consumption by day', checked: true },\r\n  { title: 'Devices limit', checked: true },\r\n  { title: 'Status by units', checked: true },\r\n  { title: 'Status by devices', checked: true }\r\n];\r\n\r\nclass SettingsStore {\r\n  @observable\r\n  private sectionSettings: TSectionsSettings;\r\n  @observable\r\n  private layout = 0;\r\n\r\n  @computed\r\n  public get overviewSettings(): IOverviewSettings {\r\n    return {\r\n      sections: this.sectionSettings,\r\n      layout: this.layout\r\n    };\r\n  }\r\n\r\n  public constructor(readonly dashboardStore: DashboardStore) {\r\n    this.dashboardStore = dashboardStore;\r\n\r\n    const overviewSettings = localStorage.getItem('overviewSettings');\r\n    if (overviewSettings) {\r\n      const data: IOverviewSettings = JSON.parse(overviewSettings);\r\n      this.sectionSettings = data.sections;\r\n      this.layout = data.layout;\r\n    } else {\r\n      const data: IOverviewSettings = {\r\n        sections: defSectionsSettings,\r\n        layout: this.layout\r\n      };\r\n\r\n      localStorage.setItem('overviewSettings', JSON.stringify(data));\r\n      this.sectionSettings = data.sections;\r\n    }\r\n  }\r\n\r\n  public setOverviewSettings = (\r\n    newSectionSettings: boolean[],\r\n    newLayout: number\r\n  ) => {\r\n    this.sectionSettings = this.sectionSettings.map((setting, index) => ({\r\n      title: setting.title,\r\n      checked: newSectionSettings[index]\r\n    }));\r\n    this.layout = newLayout;\r\n\r\n    localStorage.setItem(\r\n      'overviewSettings',\r\n      JSON.stringify(this.overviewSettings)\r\n    );\r\n  };\r\n}\r\n\r\nexport default SettingsStore;\r\n","import { observable, computed } from 'mobx';\r\nimport { RootStore } from './RootStore';\r\nimport SettingsStore from './SettingsStore';\r\nimport { gridLayouts } from '../constants/girdLayouts';\r\n\r\nclass DashboardStore {\r\n  readonly settingsStore: SettingsStore;\r\n\r\n  @observable\r\n  public isNavVisible = true;\r\n  @observable\r\n  private openedModals: string[] = [];\r\n\r\n  @computed\r\n  public get currentOverviewMode() {\r\n    const current = this.settingsStore.overviewSettings.layout;\r\n    return {\r\n      key: current,\r\n      css: gridLayouts[current]\r\n    };\r\n  }\r\n\r\n  public constructor(readonly rootStore: RootStore) {\r\n    this.rootStore = rootStore;\r\n    this.settingsStore = new SettingsStore(this);\r\n  }\r\n\r\n  public toggleNav = () => {\r\n    this.isNavVisible = !this.isNavVisible;\r\n  };\r\n\r\n  public isModalOpened = (key: string) => this.openedModals.indexOf(key) !== -1;\r\n\r\n  public openModal = (key: string) => {\r\n    this.openedModals.push(key);\r\n  };\r\n\r\n  public closeModal = (key: string) => {\r\n    const idx = this.openedModals.indexOf(key);\r\n    if (idx !== -1) {\r\n      this.openedModals.splice(idx, 1);\r\n    }\r\n  };\r\n\r\n  public closeAllModals = () => {\r\n    this.openedModals = [];\r\n  };\r\n}\r\n\r\nexport default DashboardStore;\r\n","const setAuthorizedToLS = (name: string | null) => {\r\n  localStorage.setItem('authorized', JSON.stringify(name));\r\n};\r\n\r\nconst delayedAction = async (errorValue: string) =>\r\n  new Promise((resolve, reject) => {\r\n    if (Math.random() > 0.3) {\r\n      setTimeout(() => resolve(true), 800);\r\n    } else {\r\n      setTimeout(() => {\r\n        reject(errorValue);\r\n      }, 400);\r\n    }\r\n  });\r\n\r\nexport const register = async (\r\n  email: string,\r\n  password: string,\r\n  name: string\r\n) => {\r\n  return delayedAction('Registration failed, network error').then(() => {\r\n    localStorage.setItem(\r\n      'fakeCreds',\r\n      JSON.stringify({ email, password, name })\r\n    );\r\n    return true;\r\n  });\r\n};\r\n\r\nexport const login = async (email: string, password: string) => {\r\n  return delayedAction('Login failed, network error').then(() => {\r\n    const key = localStorage.getItem('fakeCreds');\r\n    if (key) {\r\n      const parsed = JSON.parse(key);\r\n      if (parsed.email === email && parsed.password === password) {\r\n        setAuthorizedToLS(parsed.name);\r\n        return parsed.name;\r\n      }\r\n    }\r\n    return false;\r\n  });\r\n};\r\n\r\nexport const logout = () => {\r\n  setAuthorizedToLS(null);\r\n};\r\n","import { RootStore } from './RootStore';\r\nimport { observable, computed } from 'mobx';\r\nimport { register, login, logout } from '../api/ls-api';\r\n\r\nexport class AuthStore {\r\n  rootStore: RootStore;\r\n\r\n  @observable\r\n  private authorizedUser: string | null = JSON.parse(\r\n    localStorage.getItem('authorized') || 'null'\r\n  );\r\n  @observable\r\n  private isLoading = false;\r\n  @observable\r\n  private errorType: string | null = null;\r\n\r\n  public constructor(rootStore: RootStore) {\r\n    this.rootStore = rootStore;\r\n  }\r\n\r\n  @computed\r\n  public get name() {\r\n    return this.authorizedUser;\r\n  }\r\n\r\n  @computed\r\n  public get error() {\r\n    return this.errorType;\r\n  }\r\n\r\n  @computed\r\n  public get loading() {\r\n    return this.isLoading;\r\n  }\r\n\r\n  public register = async (email: string, password: string, name: string) => {\r\n    console.log('reg start', email, password, name);\r\n    this.isLoading = true;\r\n    try {\r\n      const res = await register(email, password, name);\r\n      console.log('reg res', res);\r\n      if (res) {\r\n        window.location.replace('#/login');\r\n        this.login(email, password);\r\n      }\r\n    } catch (error) {\r\n      console.log('reg err', error);\r\n      this.errorType = error;\r\n      this.isLoading = false;\r\n    }\r\n  };\r\n\r\n  public login = async (email: string, password: string) => {\r\n    console.log('log start', email, password);\r\n    this.isLoading = true;\r\n    try {\r\n      const res = await login(email, password);\r\n      this.isLoading = false;\r\n      console.log('log res', res);\r\n      if (res) {\r\n        this.authorizedUser = res;\r\n        window.location.replace('#/dashboard');\r\n        return true;\r\n      } else {\r\n        this.errorType = 'Email or password is incorrect!';\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      this.errorType = error;\r\n    }\r\n    console.log('log err', this.errorType);\r\n    this.isLoading = false;\r\n    return null;\r\n  };\r\n\r\n  public logout = () => {\r\n    this.authorizedUser = null;\r\n    logout();\r\n    window.location.replace('#/login');\r\n  };\r\n}\r\n","import DashboardStore from './DashboardStore';\r\nimport { AuthStore } from './AuthStore';\r\n\r\nexport class RootStore {\r\n  readonly dashboardStore: DashboardStore;\r\n  readonly authStore: AuthStore;\r\n\r\n  public constructor() {\r\n    this.authStore = new AuthStore(this);\r\n    this.dashboardStore = new DashboardStore(this);\r\n  }\r\n}\r\n\r\nexport const rootStore = new RootStore();\r\n","import styled, { css } from 'styled-components';\r\nimport { ButtonSkins } from '../../types';\r\nimport { getProp } from '../../utils/getProp';\r\n\r\ninterface IButtonStyledProps {\r\n  skin: ButtonSkins;\r\n  width?: string | number;\r\n}\r\n\r\nexport const ButtonStyled = styled.button<IButtonStyledProps>`\r\n  min-width: 82px;\r\n  width: ${({ width = 'auto' }) => getProp(width)};\r\n  height: 33px;\r\n  margin: 0;\r\n  padding: 0 8px;\r\n  background-color: #1f8efa;\r\n  border-radius: 2px;\r\n  border: none;\r\n  font-size: 12px;\r\n  font-weight: 500;\r\n  text-transform: uppercase;\r\n  color: #ffffff;\r\n  cursor: pointer;\r\n  transition: background-color 50ms;\r\n\r\n  ${({ skin }) => {\r\n    switch (skin) {\r\n      case ButtonSkins.BADGE:\r\n        return css`\r\n          min-width: unset;\r\n          height: unset;\r\n          padding: 4px 15px;\r\n          background-color: #3e4e6c;\r\n          border-radius: 50px;\r\n        `;\r\n      case ButtonSkins.CIRCLE:\r\n      case ButtonSkins.ICON:\r\n        return css`\r\n          min-width: unset;\r\n          width: 42px;\r\n          height: 42px;\r\n          display: flex;\r\n          align-items: center;\r\n          justify-content: center;\r\n          padding: unset;\r\n          ${skin === ButtonSkins.CIRCLE && 'border-radius: 50%'};\r\n          ${skin === ButtonSkins.ICON && 'background-color: transparent'};\r\n        `;\r\n      case ButtonSkins.TRANSPARENT:\r\n        return css`\r\n          background-color: transparent;\r\n        `;\r\n    }\r\n  }}\r\n\r\n  &:active {\r\n    background-color: #3e4e6c;\r\n    transition: background-color 50ms;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { ButtonStyled } from './Button.styles';\r\nimport { ButtonSkins } from '../../types';\r\n\r\ninterface IProps {\r\n  children: any;\r\n  skin?: ButtonSkins;\r\n  width?: string | number;\r\n}\r\n\r\ntype IButtonProps = IProps & React.ButtonHTMLAttributes<HTMLButtonElement>;\r\n\r\nconst Button: React.FC<IButtonProps> = ({\r\n  children,\r\n  skin = ButtonSkins.DEFAULT,\r\n  width,\r\n  disabled,\r\n  ...rest\r\n}) => {\r\n  return (\r\n    <ButtonStyled skin={skin} width={width} {...rest}>\r\n      {children}\r\n    </ButtonStyled>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import Button from './Button';\r\n\r\nexport default Button;\r\n","export const gridLayouts: [string, string, string][] = [\r\n  [\r\n    '\"camera camera camera room room\"',\r\n    '\"camera camera camera day limit\"',\r\n    '\"units units units units units\"'\r\n  ],\r\n  [\r\n    '\"room room camera camera camera\"',\r\n    '\"day limit camera camera camera\"',\r\n    '\"units units units units units\"'\r\n  ],\r\n  [\r\n    '\"units camera camera room room\"',\r\n    '\"units camera camera room room\"',\r\n    '\"units camera camera day limit\"'\r\n  ],\r\n  [\r\n    '\"units camera camera camera room\"',\r\n    '\"units camera camera camera day\"',\r\n    '\"units camera camera camera limit\"'\r\n  ],\r\n  [\r\n    '\"units units units units units\"',\r\n    '\"camera camera camera room room\"',\r\n    '\"camera camera camera day limit\"'\r\n  ],\r\n  [\r\n    '\"units units units units units\"',\r\n    '\"room room camera camera camera\"',\r\n    '\"day limit camera camera camera\"'\r\n  ],\r\n  [\r\n    '\"units units units units units\"',\r\n    '\"room room camera camera camera\"',\r\n    '\"day limit camera camera camera\"'\r\n  ],\r\n  [\r\n    '\"units units units units units\"',\r\n    '\"room room camera camera camera\"',\r\n    '\"day limit camera camera camera\"'\r\n  ]\r\n];\r\n","import styled, { keyframes } from 'styled-components';\r\n\r\nconst dotAnimations = [\r\n  keyframes`0% {\r\n    transform: scale(0);\r\n  }\r\n  100% {\r\n    transform: scale(1);\r\n  }`,\r\n  keyframes`0% {\r\n    transform: translate(0, 0);\r\n  }\r\n  100% {\r\n    transform: translate(24px, 0);\r\n  }`,\r\n  keyframes`0% {\r\n    transform: scale(1);\r\n  }\r\n  100% {\r\n    transform: scale(0);\r\n  }`\r\n];\r\n\r\nexport const Wrapper = styled.div`\r\n  display: inline-block;\r\n  position: relative;\r\n  width: 80px;\r\n  height: 10px;\r\n`;\r\n\r\nexport const Dot = styled.div`\r\n  position: absolute;\r\n  width: 10px;\r\n  height: 10px;\r\n  border-radius: 50%;\r\n  background: #ffffff;\r\n  animation-timing-function: cubic-bezier(0, 1, 1, 0);\r\n\r\n  &:nth-child(1) {\r\n    left: 8px;\r\n    animation: ${dotAnimations[0]} 0.6s infinite;\r\n  }\r\n  &:nth-child(2) {\r\n    left: 8px;\r\n    animation: ${dotAnimations[1]} 0.6s infinite;\r\n  }\r\n  &:nth-child(3) {\r\n    left: 32px;\r\n    animation: ${dotAnimations[1]} 0.6s infinite;\r\n  }\r\n  &:nth-child(4) {\r\n    left: 56px;\r\n    animation: ${dotAnimations[2]} 0.6s infinite;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { Wrapper, Dot } from './Loader.styles';\r\n\r\nconst Loader = () => (\r\n  <Wrapper>\r\n    <Dot />\r\n    <Dot />\r\n    <Dot />\r\n    <Dot />\r\n  </Wrapper>\r\n);\r\n\r\nexport default Loader;\r\n","import Loader from './Loader';\r\n\r\nexport default Loader;\r\n","import styled, { createGlobalStyle } from 'styled-components';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  html, body {\r\n    margin: 0;\r\n    padding: 0;\r\n    background-color: #242e42;\r\n    font-family: Roboto, Arial, Helvetica, sans-serif;\r\n  };\r\n\r\n  * {\r\n    box-sizing: border-box;\r\n    outline: none;\r\n  };\r\n\r\n  .key-input {\r\n    *:focus { \r\n      background-color: #44556b;\r\n    };\r\n\r\n    *:active { \r\n      background-color: #3e4e6c;\r\n    }\r\n  };\r\n`;\r\n\r\nexport const LoaderWraper = styled.div`\r\n  position: absolute;\r\n  left: 50%;\r\n  top: 50%;\r\n  transform: translate(-50%);\r\n`;\r\n","import React from 'react';\r\nimport { Route, Redirect, RouteProps } from 'react-router-dom';\r\nimport { rootStore } from '../../../stores/RootStore';\r\n\r\ninterface IProps {\r\n  component: any;\r\n}\r\n\r\ntype IPrivateRouteProps = RouteProps & IProps;\r\n\r\nconst PrivateRoute: React.FC<IPrivateRouteProps> = ({\r\n  component: Component,\r\n  ...rest\r\n}) => (\r\n  <Route\r\n    {...rest}\r\n    render={props =>\r\n      rootStore.authStore.name ? (\r\n        <Component {...props} />\r\n      ) : (\r\n        <Redirect\r\n          to={{\r\n            pathname: '/login',\r\n            state: { from: props.location }\r\n          }}\r\n        />\r\n      )\r\n    }\r\n  />\r\n);\r\n\r\nexport default PrivateRoute;\r\n","import React, { Component, Suspense, lazy } from 'react';\r\nimport { HashRouter, Redirect, Route, Switch } from 'react-router-dom';\r\nimport { GlobalStyle, LoaderWraper } from './App.styles';\r\nimport PrivateRoute from './PrivateRoute/PrivateRoute';\r\nimport Loader from '../../components/Loader';\r\nimport { observer } from 'mobx-react';\r\nimport { observable } from 'mobx';\r\nimport Button from '../../components/Button';\r\n\r\nconst Auth = lazy(() => import('../../views/Auth'));\r\nconst Dashboard = lazy(() => import('../../views/Dashboard'));\r\n\r\n@observer\r\nclass App extends Component {\r\n  @observable\r\n  private hasError = false;\r\n\r\n  public componentDidMount() {\r\n    document.body.addEventListener('mousedown', this.setMouseInput);\r\n    document.body.addEventListener('keydown', this.keyboardHandler);\r\n  }\r\n\r\n  public componentDidCatch() {\r\n    this.hasError = true;\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <HashRouter>\r\n        <GlobalStyle />\r\n        {this.hasError ? (\r\n          <Button onClick={() => window.location.reload()}>Refresh</Button>\r\n        ) : (\r\n          <Suspense\r\n            fallback={\r\n              <LoaderWraper>\r\n                <Loader />\r\n              </LoaderWraper>\r\n            }\r\n          >\r\n            <Switch>\r\n              <PrivateRoute path=\"/dashboard\" component={Dashboard} />\r\n              <Route path=\"/login\" component={Auth} />\r\n              <Redirect to=\"/dashboard\" />\r\n            </Switch>\r\n          </Suspense>\r\n        )}\r\n      </HashRouter>\r\n    );\r\n  }\r\n\r\n  private setMouseInput = () => {\r\n    document.body.classList.remove('key-input');\r\n    document.body.removeEventListener('mousedown', this.setMouseInput);\r\n    document.body.addEventListener('keydown', this.keyboardHandler);\r\n  };\r\n\r\n  private keyboardHandler = (event: KeyboardEvent) => {\r\n    const keys = ['Tab', 'Escape'];\r\n    if (keys.includes(event.key)) {\r\n      this.setKeyboardInput();\r\n    }\r\n  };\r\n\r\n  private setKeyboardInput = () => {\r\n    document.body.classList.add('key-input');\r\n    document.body.removeEventListener('keydown', this.keyboardHandler);\r\n    document.body.addEventListener('mousedown', this.setMouseInput);\r\n  };\r\n}\r\n\r\nexport default App;\r\n","import App from './App';\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './entry/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}